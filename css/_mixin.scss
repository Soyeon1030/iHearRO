@import "./variable";


// 반응형 관련 mixin
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media screen and (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Warning: `#{$breakpoint}` 는 정의되지 않은 브레이크포인트입니다.";
  }
}

// 3. 특정 범위에서만 적용되는 스타일을 위한 믹스인
@mixin respond-between($min, $max) {
  @if map-has-key($breakpoints, $min) and map-has-key($breakpoints, $max) {
    $min-width: map-get($breakpoints, $min);
    $max-width: map-get($breakpoints, $max);
    
    @media screen and (min-width: $min-width) and (max-width: $max-width) {
      @content;
    }
  }
}

// flex 관련 mixin
@mixin flex ($justify: center, $align: center, $gap: 1rem, $direction: row) {
  display: flex;
  justify-content: $justify;
  align-items: $align;
  gap: $gap;
  flex-direction: $direction;
}

// position 관련 mixin
@mixin pos($p: relative, $top: null, $right: null, $bottom: null, $left: null) {
  position: $p;
  @if $top != null {
    top: $top;
  }
  @if $right != null {
    right: $right;
  }
  @if $bottom != null {
    bottom: $bottom;
  }
  @if $left != null {
    left: $left;
  }
}
@mixin absolute-center($top: 50%, $left: 50%, $transform: true) {
  position: absolute;
  top: $top;
  left: $left;
  @if $transform {
    transform: translate(-50%, -50%);
  }
}
@mixin fixed-center($top: 50%, $left: 50%, $transform: true) {
  position: fixed;
  top: $top;
  left: $left;
  @if $transform {
    transform: translate(-50%, -50%);
  }
}

// padding, margin 관련 mixin
@mixin blank ($margin-values: null, $padding-values: null) {
  // Margin 설정
  @if $margin-values != null {
    @if length($margin-values) == 1 {
      margin: nth($margin-values, 1);
    }
    @else if length($margin-values) == 2 {
      margin: nth($margin-values, 1) nth($margin-values, 2);
    }
    @else if length($margin-values) == 3 {
      margin: nth($margin-values, 1) nth($margin-values, 2) nth($margin-values, 3);
    }
    @else if length($margin-values) == 4 {
      margin: nth($margin-values, 1) nth($margin-values, 2) nth($margin-values, 3) nth($margin-values, 4);
    }
  }
  // Padding 설정
  @if $padding-values != null {
    @if length($padding-values) == 1 {
      padding: nth($padding-values, 1);
    }
    @else if length($padding-values) == 2 {
      padding: nth($padding-values, 1) nth($padding-values, 2);
    }
    @else if length($padding-values) == 3 {
      padding: nth($padding-values, 1) nth($padding-values, 2) nth($padding-values, 3);
    }
    @else if length($padding-values) == 4 {
      padding: nth($padding-values, 1) nth($padding-values, 2) nth($padding-values, 3) nth($padding-values, 4);
    }
  }
}

// width, height 관련 mixin
@mixin size ($width: auto, $height: auto, $max-width: null, $min-width: null, $max-height: null, $min-height: null) {
  @if $width != null {
    width: $width;
  }
  @if $height != null {
    height: $height;
  }
  @if $max-width != null {
    max-width: $max-width;
  }
  @if $min-width != null {
    min-width: $min-width;
  }
  @if $max-height != null {
    max-height: $max-height;
  }
  @if $min-height != null {
    min-height: $min-height;
  }
}

// 텍스트 관련 mixin
@mixin ellipsis($line: 1) {
  @if ($line == 1) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    word-wrap: break-word; 
    line-clamp: $line;
    box-orient: vertical;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
  }
}
@mixin text-style($color: $gray-800, $font-size: $font-size-16, $font-weight: 400) {
  color: $color;
  font-size: $font-size;
  font-weight: $font-weight;
}
// 기본 폰트 믹스인 (size와 weight 모두 지정)
@mixin font($size, $weight: null) {
  @if map-has-key($font-sizes, $size) {
    font-size: map-get($font-sizes, $size);
  } @else {
    @error "'#{$size}'는 유효하지 않은 폰트 사이즈입니다.";
  }
  
  @if $weight {
    font-weight: $weight;
  }
}
// 반응형 폰트 믹스인
@mixin responsive-font($desktop-size, $desktop-weight: null, $tablet-size: null, $tablet-weight: null, $mobile-size: null, $mobile-weight: null) {
  // 데스크탑 스타일
  @include font($desktop-size, $desktop-weight);
  
  // 태블릿 스타일
  @if $tablet-size {
    @include respond-to('tablet-l') {
      @include font($tablet-size, $tablet-weight);
    }
  }
  
  // 모바일 스타일
  @if $mobile-size {
    @include respond-to('mobile') {
      @include font($mobile-size, $mobile-weight);
    }
  }
}
//유연한 줄바꿈을 위한 믹스인
@mixin flexible-text-break($max-width: 768px) {
  white-space: pre-line;
  word-break: keep-all;
  word-wrap: break-word;
  
  @include respond-to('tablet-l') {
    white-space: normal;
  }
}
// 반응형 여백 조정을 위한 믹스인
@mixin responsive-spacing {
  --text-spacing: 1.5;  // 기본 행간
  
  @include respond-to('tablet-l') {
    --text-spacing: 1.3;
  }
  
  @include respond-to('mobile') {
    --text-spacing: 1.2;
  }
  
  line-height: var(--text-spacing);
}

// 버튼 관련 mixin
@mixin button-style-line($bg-color: $primary-color, $color: $white, $border-color: $primary-color) {
  @include pos (relative);
  margin-top: 2rem;
  transition: 0.5s ease-in-out;
  span {
    @include pos (relative);
    @include text-style($primary-color , $font-size-16, 400);
    display: inline-block;
    padding: 0.75rem 2rem;
    border: 1px solid $primary-color;
    transition: 0.2s;
    &:hover {
      color: $white;
      transition: 0.5s;
    }
  } 
  &::before {
    @include pos (absolute, 0, null, null, 0);
    content: "";
    width: 0%;
    height: 100%; 
    background-color: $primary-color;
    transition: 0.3s ease-out;
  }
  &:hover::before {
    width: 100%;
  }
}
@mixin button-style-fill($bg-color: $primary-color, $color: $white, $border-color: $primary-color) {
  color: $color;
  background-color: $bg-color;
  border: 1px solid $border-color;
  overflow: hidden;
  transition: color 0.3s ease-in-out;
  span {
    @include pos(relative);
    display: inline-block;
    padding: 0.75rem 2rem;
    color: inherit;
    font-size: $font-size-16;
    z-index: 1;
    transition: color 0.3s ease-in-out;
  }
  &::before {
    @include pos(absolute, 0, auto, 0, 0); 
    content: "";
    width: 0%;
    height: 100%;
    background-color: $white; 
    transition: width 0.5s ease-in-out; 
    z-index: 0; 
  }
  &:hover {
    color: $primary-color;
    &::before {
      width: 100%;
    }
  }
}

// 이미지 관련 mixin
@mixin icon {
  width: 1.5rem;
  height: 1.5rem;
  img {
    @include img
  }
}
@mixin sns {
  width: 1.875rem;
  height: 1.875rem;
  img {
    @include img
  }
}

// 애니메이션 관련 mixin
@mixin animation(
  $name, 
  $duration: 1s, 
  $infinite: false, 
  $count: 1, 
  $timing-function: ease, 
  $delay: 0s, 
  $fill-mode: forwards
) {
  animation-name: $name;
  animation-duration: $duration;
  animation-timing-function: $timing-function;
  animation-delay: $delay;
  animation-fill-mode: $fill-mode;

  @if $infinite {
    animation-iteration-count: infinite;
  } @else {
    animation-iteration-count: $count;
  }
}
